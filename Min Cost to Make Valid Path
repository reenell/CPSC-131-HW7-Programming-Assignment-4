class Solution {
public:
    int minCost(vector<vector<int>>& grid) {
    int n=grid.size(), m=grid[0].size();
    int dxy[4][2]={{0,1},{0,-1},{1,0},{-1,0}}; 
    
    vector<vector<int>> cost(n,vector<int>(m,n*m+1));
    cost[0][0]=0;
    
    queue<pair<int,int>> q;
    q.push({0,0});
    int a=n*m+1;
    while(q.size()>0) {
        pair<int,int> p=q.front();
        q.pop();
        int i=p.first, j=p.second;
        
        if(i==n-1 && j==m-1) {
            a=min(a,cost[i][j]);
            continue;
        }  
        
        for(int k=0;k<4;k++) {
            int x=i+dxy[k][0], y=j+dxy[k][1];
            if(x>=0 && y>=0 && x<n && y<m) {
                int dir=k+1;
                if(dir==grid[i][j] && cost[x][y]>cost[i][j]) { 
                    cost[x][y]=min(cost[x][y],cost[i][j]);
                    q.push({x,y});
                }
                
                else if(cost[i][j]+1<cost[x][y]) {
                    cost[x][y]=cost[i][j]+1;
                    q.push({x,y});
                }
            }
        }
    }
    return a;
    }

};
